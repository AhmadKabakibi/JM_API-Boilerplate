# Javascript Node CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
defaults: &defaults
  docker:
    - image: circleci/node:8.11
  working_directory: ~/repo
jobs:
  prepare:
    <<: *defaults
    steps:
      - run:
          name: Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter

  lint:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dev-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dev-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: dev-dependencies-{{ checksum "package.json" }}

      - run:
          name: Run Linting tests
          command: |
            npm run lint && node scripts/utils/checkWipCommits

  coverage:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dev-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dev-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: dev-dependencies-{{ checksum "package.json" }}

      - run:
          name: Run Coverage tests
          command: |
            npm run test:coverage
            ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.json coverage/lcov.info
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.json

  upload-coverage:
    <<: *defaults
    environment:
      - CC_TEST_REPORTER_ID: df3abd3219266522d7d6e0a50c9a6258a7e96b76be38eaf886fac185a8a48356
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.json
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - docker-image

  deployment:
    <<: *defaults
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Installing deployment dependencies
          command: |
            sudo apt-get install -y python python-dev python-pip python-virtualenv virtualenv
            virtualenv venv
            . venv/bin/activate
            sudo rm -rf /var/lib/apt/lists/*
            sudo pip install rsa --upgrade
            sudo pip install awscli --upgrade
            sudo pip install docker-compose --upgrade
      - run:
          name: Load Docker image
          command: |
            docker load --input workspace/docker-image/image.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export ECS_CLUSTER_NAME="${AWS_RESOURCE_NAME_PREFIX}-cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            . venv/bin/activate
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:$CIRCLE_SHA1
      - run:
          name: Deploy
          command: |
            . venv/bin/activate
            export ECS_TASK_FAMILY_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"
            export ECS_CONTAINER_DEFINITION_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"
            export EXECUTION_ROLE_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:role/${AWS_RESOURCE_NAME_PREFIX}-ecs-execution-role"
            bash ~/repo/.circleci/deploy.sh

workflows:
  version: 2
  commit:
    jobs:
      - lint
      - prepare
      - coverage:
          requires:
            - lint
            - prepare
      - upload-coverage:
          requires:
            - lint
            - prepare
            - coverage
      - build:
          requires:
            - lint
            - prepare
            - coverage
            - upload-coverage
      - deployment:
          requires:
            - lint
            - prepare
            - coverage
            - upload-coverage
            - build
          filters:
            branches:
              only:
                - staging
                - master
